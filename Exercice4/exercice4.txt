4.1 et 4.2 (justification)
	Valeur du paramètre : 0
	Dans Matrix2, il faut tester pour chaque noeud s'il se trouve bien
	sur la ligne recherchée. Dans notre cas, cela représente 2 tests de plus que pour Matrix3
	De plus, l'implémentation proposée à l'exercice précédent permet permet de ne pas parcourir
	toute la liste mais nécessite de vérifier si l'indice de ligne actuel est inférieur ou
	égal à l'indice de la ligne recherchée, ce qui ajoute des opérations pour Matrix2

	Pour cet appel, Matrix 3 effectue moins d'opérations

	Valeur du paramètre : 1

	Matrix3 permet de traiter uniquement la ligne souhaitée grâce à l'accès direct
	dans le tableau. pour Matrix2, en plus des différences vues dans le cas où le
	paramètre serait 0, il faut parcourir la liste jusqu'à trouver les éléments de la ligne voulue.
	Ici, on vérifie donc les 2 premier éléments (ligne 0) puis le 3ème (ligne 5)
	avant de sortir de la méthode. Matrix3 traite un liste de 2 éléments (tête et queue fictives) (la tête fictive n'est pas traitée),
	sans tester les indices de ligne

	Matrix3 effectue moins d'opérations

4.3 et 4.4 (justification)
	Valeur du paramètre : 8
	Pour Matrix2, il faut parcourir la totalité de la liste et tester pour chaque élément
	l'indice de colonne (ici on teste 4 noeuds et on parcours 5 noeuds : 4 + queue fictive).
	Matrix3 doit parcourir les cases du tableau, ce qui donne lieu à 10 tests (indice i) et incrémentations,
	et vérifier que l'indice de la colonne actuelle est inférieur ou égal à l'indice de la colonne recherchée
	(cela réduit le nombre d'éléments à traiter mais augmente le nombre de tests si la colonne
	recherchée est située vers la fin des listes, ce qui est le cas ici)

	Dans cette configuration, Matrix2 effectue moins d'opérations

	Valeur du paramètre : 9
	La situation est la même car Matrix2 n'effectuera pas plus d'opérations
	alors que Matrix3 devra parcourir plus de noeuds pour atteindre les
	queues des listes 0 et 9 (voir condition de continuation de la boucle for)

	Matrix2 effectue à nouveau moins d'opérations

4.5 et 4.6 (justification)
	Valeurs : 0, 0
	Matrix2 doit tester l'indice de la ligne, ce qui n'est pas le cas de Matrix3.
	Les boucles en elles mêmes effectuent le même nombre d'opérations.

	C'est donc Matrix3 qui effectue moins d'opérations
	(pour cette valeur, la différence est faible car 1 seul noeud est parcouru)

	Valeurs : 1, 1
	Dans cette situation, Matrix2 effectue encore plus d'opérations car il faut
	parcourir les 3 premiers noeuds avant de déterminer que (1, 1) vaut 0 (n'est pas
	dans la matrice). Alors que Matrix3 n'entre pas dans la boucle (le premier noeud testé
	est la queue fictive de la ligne 1, ce qui sort de la boucle)

	C'est donc Matrix3 qui effectue moins d'opérations

	Valeurs : 9, 9
	Matrix2 doit parcourir touts les éléments non nuls de la liste avant de trouver
	le noeud recherché. Matrix3 ne traite qu'un seul noeud (celui recherché) car elle ne
	recherche que dans la ligne d'indice 9

	Matrix3 effectue moins d'opérations

4.7 et 4.8 (justification)
	Nous aurions pu utiliser la structure de données suivante :
		CList<std::pair<size_t, CList<pairColVal>>
	Avec le premier élément de la paire qui stocke l'indice de ligne
	et le second qui est une liste similaire à ce qui est utilisé pour Matrix3.
	Grâce à cette structure, les lignes vides n'occupent plus de mémoire
	inutilement, le parcours des différentes lignes est plus rapide qu'avec Matrix3
	(car les lignes qui ne comportent pas de valeurs non nulles sont absentes de la matrice).
	L'accès à une ligne ne se fait par directement comme avec Matrix3 mais est plus rapide qu'avec Matrix2
	qui doit traiter tous les noeuds des lignes précédentes.
